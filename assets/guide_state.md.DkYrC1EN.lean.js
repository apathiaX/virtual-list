import{_ as t,c as i,a0 as a,o}from"./chunks/framework.DApwE8x4.js";const p=JSON.parse('{"title":"BaseVirtualList API","description":"","frontmatter":{},"headers":[],"relativePath":"guide/state.md","filePath":"en/guide/state.md","lastUpdated":1728579221000}'),l={name:"guide/state.md"};function r(s,e,n,c,d,h){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="basevirtuallist-api" tabindex="-1">BaseVirtualList API <a class="header-anchor" href="#basevirtuallist-api" aria-label="Permalink to &quot;BaseVirtualList API&quot;">​</a></h1><h2 id="public-properties" tabindex="-1">Public Properties <a class="header-anchor" href="#public-properties" aria-label="Permalink to &quot;Public Properties&quot;">​</a></h2><p>The following are properties that can be accessed publicly on an instance of <code>BaseVirtualList</code>.</p><ul><li><code>_list: T[]</code> - The current list of items being managed by the virtual list.</li><li><code>_renderList: T[]</code> - The list of items being rendered currently.</li><li><code>_childrenSize: IVirtualListChildrenSize</code> - Contains sizes for client, header, footer, sticky header, and sticky footer.</li></ul><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">​</a></h2><h3 id="scroll-control" tabindex="-1">Scroll Control <a class="header-anchor" href="#scroll-control" aria-label="Permalink to &quot;Scroll Control&quot;">​</a></h3><ul><li><code>scrollToOffset(targetOffset: number): void</code>: Scrolls the list to a specific offset.</li><li><code>scrollToIndex(index: number): void</code>: Scrolls to the specified index.</li><li><code>scrollIntoView(index: number): void</code>: Ensures that a specific item is in view.</li><li><code>scrollToTop(): void</code>: Scrolls to the top of the list.</li><li><code>scrollToBottom(): void</code>: Scrolls to the bottom of the list.</li></ul><h3 id="list-management" tabindex="-1">List Management <a class="header-anchor" href="#list-management" aria-label="Permalink to &quot;List Management&quot;">​</a></h3><ul><li><code>manualTopListChange(list: T[], isDelete = false): void</code>: Manually adjusts the top portion of the list when items are added or removed.</li></ul><h2 id="internal-properties" tabindex="-1">Internal Properties <a class="header-anchor" href="#internal-properties" aria-label="Permalink to &quot;Internal Properties&quot;">​</a></h2><p>While these are marked as private, they influence the behavior and state of the virtual list:</p><ul><li><code>_state: IVirtualListState</code>: Stores the current state of the list including the buffer sizes, views, offset, etc.</li><li><code>_itemKey: string</code>: Key used to uniquely identify each item in the list.</li><li><code>_minSize: number</code>: Minimum size of each item in the list.</li></ul>',12)]))}const f=t(l,[["render",r]]);export{p as __pageData,f as default};
